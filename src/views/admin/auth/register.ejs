<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Register | Admin Dashboard</title>
    <link rel="stylesheet" href="/assets/css/main.css" />
    <link rel="stylesheet" href="/assets/css/form.css" />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      .password-requirements {
        margin-top: 5px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 8px;
        font-size: 12px;
      }

      .password-requirements h4 {
        margin-top: 0;
        margin-bottom: 5px;
        font-size: 13px;
      }

      .requirement {
        display: flex;
        align-items: center;
        margin-bottom: 3px;
        color: #666;
      }

      .requirement i {
        margin-right: 5px;
        font-size: 10px;
      }

      .requirement.valid {
        color: #4caf50;
      }

      .requirement.valid i {
        color: #4caf50;
      }
    </style>
  </head>

  <div class="register-container">
    <div class="logo">
      <h1>Admin Dashboard</h1>
    </div>

    <form id="registerForm" method="post" action="/admin/register">
      <div class="form-group">
        <label for="name">Name</label>
        <input
          autocomplete="name"
          value="<%= old?.name %>"
          type="text"
          id="name"
          name="name"
          class="form-control"
          placeholder="Enter name"
        />
        <% if (errors?.name) {%>
        <span class="form-message"> <%= errors?.name %> </span>
        <% } %>
        <span class="form-message"></span>
      </div>

      <div class="form-group <%= errors?.email ? 'invalid' : '' %>">
        <label for="email">Email</label>
        <input
          autocomplete="email"
          value="<%= old?.email %>"
          type="email"
          id="email"
          name="email"
          class="form-control"
          placeholder="Enter your email"
        />
        <% if (errors?.email) {%>
        <span class="form-message"> <%= errors?.email %> </span>
        <% } %>
        <span class="form-message"></span>
      </div>

      <div class="form-group">
        <label for="password">Password</label>
        <div style="display: flex; align-items: center; position: relative">
          <input
            type="password"
            value="Minhthnd@512006"
            id="password"
            name="password"
            class="form-control"
            placeholder="Choose a password"
          />
          <i
            style="position: absolute; right: 10px; padding: 5px"
            class="fa-solid fa-eye-slash password"
          ></i>
        </div>
        <span class="form-message" id="passwordError"></span>
        <div class="password-requirements">
          <h4>Password Requirements:</h4>
          <div class="requirement" id="lengthReq">
            <i class="fas fa-circle"></i> At least 8 characters
          </div>
          <div class="requirement" id="uppercaseReq">
            <i class="fas fa-circle"></i> At least one uppercase letter
          </div>
          <div class="requirement" id="lowercaseReq">
            <i class="fas fa-circle"></i> At least one lowercase letter
          </div>
          <div class="requirement" id="numberReq">
            <i class="fas fa-circle"></i> At least one number
          </div>
          <div class="requirement" id="specialReq">
            <i class="fas fa-circle"></i> At least one special character
          </div>
        </div>
      </div>

      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <div style="display: flex; align-items: center; position: relative">
          <input
            type="password"
            value="Minhthnd@512006"
            name="confirm_password"
            id="confirmPassword"
            class="form-control"
            placeholder="Confirm password"
          />
          <i
            style="position: absolute; right: 10px; padding: 5px"
            class="fa-solid fa-eye-slash confirm_password"
          ></i>
        </div>
        <span class="form-message" id="confirmPasswordError"></span>
      </div>

      <!-- <div class="terms">
        <input type="checkbox" id="terms" required />
        <label for="terms"
          >I agree to the Terms of Service and Privacy Policy</label
        >
        <span
          class="error-text"
          id="termsError"
          style="display: block; margin-left: 20px"
          >You must agree to the terms to continue.</span
        >
      </div> -->

      <button type="submit" class="btn">Create Account</button>

      <div class="footer">
        <p>Already have an account? <a href="/admin/login">Login</a></p>
      </div>
    </form>
  </div>

  <script type="module">
    import * as yup from "https://cdn.skypack.dev/yup";
    const registerSchema = yup.object().shape({
      name: yup.string().required("Please enter your name"),
      email: yup
        .string()
        .email("This field must be an email")
        .required("Please enter your email"),
      password: yup
        .string()
        .required("Please enter a password")
        .test(
          "password",
          "Password must meet all requirements",
          function (value) {
            const errors = [];

            if (!value) return true;

            if (value.length < 8) errors.push("at least 8 characters long");

            if (!/[0-9]/.test(value)) errors.push("a number");

            if (!/[a-z]/.test(value)) errors.push("a lowercase letter");

            if (!/[A-Z]/.test(value)) {
              errors.push("an uppercase letter");
            }

            if (!/[^\w]/.test(value)) errors.push("a special character");

            if (errors.length > 0) {
              return this.createError({
                message: `Password requires: ${errors.join(", ")}`,
              });
            }

            return true;
          },
        ),

      confirm_password: yup
        .string()
        .oneOf([yup.ref("password"), null], "Passwords do not match"),
    });
    const registerForm = document.getElementById("registerForm");
    const result = registerForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const data = {
        name: document.getElementById("name").value,
        email: document.getElementById("email").value,
        password: document.getElementById("password").value,
        confirm_password: document.getElementById("confirmPassword").value,
      };
      try {
        const validatedData = await registerSchema.validate(data, {
          abortEarly: false,
        });
        if (validatedData) {
          registerForm.submit();
        }
      } catch (err) {
        // console.log({ err });
        if (err instanceof yup.ValidationError) {
          const passwordReqs = [];

          err.inner.forEach((error) => {
            const errorInput = document.querySelector(
              `input[name=${error.path}]`,
            );

            const errorSpan = errorInput
              .closest(".form-group")
              .querySelector(".form-message");
            errorSpan.textContent = error.message;
            errorInput.closest(".form-group").classList.add("invalid");
            errorInput.classList.remove("input-hover");

            errorInput.oninput = () => {
              errorSpan.textContent = "";
              errorInput.closest(".form-group").classList.remove("invalid");
              errorInput.classList.add("input-hover");
            };
          });
        }
      }
    });

    // Password
    document.addEventListener("DOMContentLoaded", function () {
      const passwordInput = document.getElementById("password");
      const confirmPasswordInput = document.getElementById("confirmPassword");
      const termsCheckbox = document.getElementById("terms");
      const termsError = document.getElementById("termsError");

      // Password requirements elements
      const lengthReq = document.getElementById("lengthReq");
      const uppercaseReq = document.getElementById("uppercaseReq");
      const lowercaseReq = document.getElementById("lowercaseReq");
      const numberReq = document.getElementById("numberReq");
      const specialReq = document.getElementById("specialReq");

      // Check password requirements in real-time
      passwordInput.addEventListener("keyup", function () {
        const password = this.value;

        // Length requirement (at least 8 characters)
        if (password.length >= 8) {
          lengthReq.classList.add("valid");
          lengthReq.querySelector("i").className = "fas fa-check-circle";
        } else {
          lengthReq.classList.remove("valid");
          lengthReq.querySelector("i").className = "fas fa-circle";
        }

        // Uppercase letter requirement
        if (/[A-Z]/.test(password)) {
          uppercaseReq.classList.add("valid");
          uppercaseReq.querySelector("i").className = "fas fa-check-circle";
        } else {
          uppercaseReq.classList.remove("valid");
          uppercaseReq.querySelector("i").className = "fas fa-circle";
        }

        // Lowercase letter requirement
        if (/[a-z]/.test(password)) {
          lowercaseReq.classList.add("valid");
          lowercaseReq.querySelector("i").className = "fas fa-check-circle";
        } else {
          lowercaseReq.classList.remove("valid");
          lowercaseReq.querySelector("i").className = "fas fa-circle";
        }

        // Number requirement
        if (/[0-9]/.test(password)) {
          numberReq.classList.add("valid");
          numberReq.querySelector("i").className = "fas fa-check-circle";
        } else {
          numberReq.classList.remove("valid");
          numberReq.querySelector("i").className = "fas fa-circle";
        }

        // Special character requirement
        if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
          specialReq.classList.add("valid");
          specialReq.querySelector("i").className = "fas fa-check-circle";
        } else {
          specialReq.classList.remove("valid");
          specialReq.querySelector("i").className = "fas fa-circle";
        }
      });

      // Password
      passwordInput.addEventListener("input", function () {
        const formGroup = this.closest(".form-group");
        const errorSpan = formGroup.querySelector(".form-message");

        if (errorSpan.textContent) {
          errorSpan.textContent = "";
          formGroup.classList.remove("invalid");
          this.classList.add("input-hover");
        }
      });

      let timeoutId;
      passwordInput.addEventListener("keyup", function () {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }

        const currentValue = this.value;
        const confirm_passwordformGroup =
          confirmPasswordInput.closest(".form-group");
        const errorSpan =
          confirm_passwordformGroup.querySelector(".form-message");

        timeoutId = setTimeout(() => {
          if (currentValue !== confirmPasswordInput.value) {
            errorSpan.textContent = "Passwords do not match";
            confirm_passwordformGroup.classList.add("invalid");
            confirmPasswordInput.classList.remove("input-hover");
          } else {
            errorSpan.textContent = "";
            confirm_passwordformGroup.classList.remove("invalid");
            confirmPasswordInput.classList.add("input-hover");
          }
        }, 400);
      });

      // Confirm_password
      confirmPasswordInput.addEventListener("input", function () {
        const formGroup = this.closest(".form-group");
        const errorSpan = formGroup.querySelector(".form-message");

        if (errorSpan.textContent) {
          errorSpan.textContent = "";
          formGroup.classList.remove("invalid");
          this.classList.add("input-hover");
        }
      });

      let timerId;
      confirmPasswordInput.addEventListener("keyup", function () {
        if (timerId) {
          clearTimeout(timerId);
        }

        const currentValue = this.value;
        const formGroup = this.closest(".form-group");
        const errorSpan = formGroup.querySelector(".form-message");

        timerId = setTimeout(() => {
          if (currentValue !== passwordInput.value) {
            errorSpan.textContent = "Passwords do not match";
            formGroup.classList.add("invalid");
            this.classList.remove("input-hover");
          }
        }, 400);
      });

      confirmPasswordInput.addEventListener("input", function () {
        const formGroup = this.closest(".form-group");
        const errorSpan = formGroup.querySelector(".form-message");

        if (errorSpan.textContent) {
          errorSpan.textContent = "";
          formGroup.classList.remove("invalid");
          this.classList.add("input-hover");
        }
      });

      // Show Password
      const eyePasswordIcon = document.querySelector(".fa-eye-slash.password");
      eyePasswordIcon.addEventListener("click", () => {
        if (passwordInput.type === "password") {
          passwordInput.type = "text";
          eyePasswordIcon.className = "fa-solid fa-eye password";
        } else {
          passwordInput.type = "password";
          eyePasswordIcon.className = "fa-solid fa-eye-slash password";
        }
      });

      const eyeConfirm_passwordIcon = document.querySelector(
        ".fa-eye-slash.confirm_password",
      );
      eyeConfirm_passwordIcon.addEventListener("click", () => {
        if (confirmPasswordInput.type === "password") {
          confirmPasswordInput.type = "text";
          eyeConfirm_passwordIcon.className =
            "fa-solid fa-eye confirm_password";
        } else {
          confirmPasswordInput.type = "password";
          eyeConfirm_passwordIcon.className =
            "fa-solid fa-eye-slash confirm_password";
        }
      });

      // Handle terms checkbox
      // termsCheckbox.addEventListener("change", function () {
      //   if (this.checked) {
      //     termsError.style.display = "none";
      //   } else {
      //     termsError.style.display = "block";
      //   }
      // });

      // Initially hide terms error
      termsError.style.display = "none";
    });
  </script>
</html>
